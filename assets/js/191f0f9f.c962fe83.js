"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[275],{2846:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"api-reference/encoder/frame-encoder","title":"FrameEncoder","description":"A base class for encoders. Custom frame encoders may be implemented and used by Hubble as new capture technologies advance, or uncommon use cases need to be implemented.","source":"@site/../docs/api-reference/encoder/frame-encoder.md","sourceDirName":"api-reference/encoder","slug":"/api-reference/encoder/frame-encoder","permalink":"/docs/api-reference/encoder/frame-encoder","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/hubble.gl/tree/master/docs/../docs/api-reference/encoder/frame-encoder.md","tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Encoders Overview","permalink":"/docs/api-reference/encoder/"},"next":{"title":"WebmEncoder","permalink":"/docs/api-reference/encoder/webm-encoder"}}');var d=r(4848),c=r(8453);const o={},i="FrameEncoder",a={},t=[{value:"Usage",id:"usage",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Members",id:"members",level:2},{value:"<code>extension</code> (String)",id:"extension-string",level:5},{value:"<code>mimeType</code> (String)",id:"mimetype-string",level:5},{value:"<code>quality</code> (Number)",id:"quality-number",level:5},{value:"<code>framerate</code> (Number)",id:"framerate-number",level:5},{value:"Methods",id:"methods",level:2},{value:"start()",id:"start",level:5},{value:"add(canvas: HTMLCanvasElement): <code>Promise&lt;void&gt;</code>",id:"addcanvas-htmlcanvaselement-promisevoid",level:5},{value:"save(): <code>Promise&lt;Blob | ArrayBuffer&gt;</code>",id:"save-promiseblob--arraybuffer",level:5},{value:"Source",id:"source",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"frameencoder",children:"FrameEncoder"})}),"\n",(0,d.jsx)(n.p,{children:"A base class for encoders. Custom frame encoders may be implemented and used by Hubble as new capture technologies advance, or uncommon use cases need to be implemented."}),"\n",(0,d.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:"import {FrameEncoder} from '@hubble.gl/core';\n\n// FrameEncoder needs to be extended, and not directly used as an encoder. \nclass CustomEncoder extends FrameEncoder {\n  constructor(settings) {\n    super(settings);\n    ...\n  }\n\n  start() {\n    ...\n  }\n\n  async add(canvas) {\n    ...\n  }\n\n  async save() {\n    ...\n  }\n}\n\n// Then CustomEncoder can be used to render.\nconst adapter = DeckAdapter({});\nadapter.render({Encoder: CustomEncoder, ...});\n"})}),"\n",(0,d.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,d.jsx)(n.p,{children:"Parameters:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"settings"})," (Object)"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"framerate"})," (",(0,d.jsx)(n.code,{children:"number"}),", Optional) - framerate of rendered video. Defaults to 30."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"See encoders for additional namespaced settings."}),"\n",(0,d.jsx)(n.h2,{id:"members",children:"Members"}),"\n",(0,d.jsxs)(n.h5,{id:"extension-string",children:[(0,d.jsx)(n.code,{children:"extension"})," (String)"]}),"\n",(0,d.jsx)(n.p,{children:"File extension."}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Default: ",(0,d.jsx)(n.code,{children:'""'})]}),"\n"]}),"\n",(0,d.jsxs)(n.h5,{id:"mimetype-string",children:[(0,d.jsx)(n.code,{children:"mimeType"})," (String)"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Default: ",(0,d.jsx)(n.code,{children:'""'})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["MIME type. See ",(0,d.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types",children:"Common MIME types"})]}),"\n",(0,d.jsxs)(n.h5,{id:"quality-number",children:[(0,d.jsx)(n.code,{children:"quality"})," (Number)"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Default: ",(0,d.jsx)(n.code,{children:"0.8"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Generic quality value. For canvas capture see ",(0,d.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL",children:"HTMLCanvasElement.toDataURL"})]}),"\n",(0,d.jsxs)(n.h5,{id:"framerate-number",children:[(0,d.jsx)(n.code,{children:"framerate"})," (Number)"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Default: ",(0,d.jsx)(n.code,{children:"30"})]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,d.jsx)(n.h5,{id:"start",children:"start()"}),"\n",(0,d.jsx)(n.p,{children:"Initialize a capture and flush the existing encoder state."}),"\n",(0,d.jsxs)(n.h5,{id:"addcanvas-htmlcanvaselement-promisevoid",children:["add(canvas: HTMLCanvasElement): ",(0,d.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,d.jsx)(n.p,{children:"Add a canvas frame to an in-progress capture."}),"\n",(0,d.jsx)(n.p,{children:"Parameters:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"canvas"})," (",(0,d.jsx)(n.code,{children:"HTMLCanvasElement"}),") - The canvas to capture."]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Returns:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"Promise<void>"})," - Add is an async function. The promise will resolve when the frame capture is complete."]}),"\n"]}),"\n",(0,d.jsxs)(n.h5,{id:"save-promiseblob--arraybuffer",children:["save(): ",(0,d.jsx)(n.code,{children:"Promise<Blob | ArrayBuffer>"})]}),"\n",(0,d.jsx)(n.p,{children:"Compile a video of the captured frames."}),"\n",(0,d.jsx)(n.p,{children:"Returns:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"Promise<Blob | ArrayBuffer>"})," - Save is an async function. The promise will resolve when the video is compiled and will contain a ",(0,d.jsx)(n.code,{children:"Blob"})," or ",(0,d.jsx)(n.code,{children:"ArrayBuffer"})," of the video content. See individual encoders for more details."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"source",children:"Source"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.a,{href:"https://github.com/visgl/hubble.gl/tree/1.4-release/modules/core/src/encoders/frame-encoder.ts",children:"modules/core/src/encoders/frame-encoder.ts"})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var s=r(6540);const d={},c=s.createContext(d);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);